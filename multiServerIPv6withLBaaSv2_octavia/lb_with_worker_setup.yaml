heat_template_version: 2018-03-02

parameters:
  server_image:
    description: ID or name of the glance image to boot from
    type: string
  ssh_key:
    description: ID or name of your ssh key. Must exist in your OpenStack account.
    type: string
  provider_network:
    description: ID or name of the external network
    type: string
  ipv6_subnetpool:
    description: ID or name of the subnet pool where you will get your public IPv6 subnet from
    type: string
  availability_zone:
    description: Availability Zone to spawn server in
    type: string

resources:
  dualstack_net:
    type: OS::Neutron::Net
    properties:
      name: heat_dualstack_net_ubuntu

  ipv4_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: heat_ipv4_subnet_ubuntu
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      network_id: { get_resource: dualstack_net }
      enable_dhcp: true
      ip_version: 4
      cidr: 10.100.0.0/16

  ipv6_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: heat_ipv6_subnet_ubuntu
      dns_nameservers:
        - 2001:4860:4860::8888
        - 2001:4860:4860::8844
      network_id: { get_resource: dualstack_net }
      enable_dhcp: true
      ip_version: 6
      ipv6_address_mode: dhcpv6-stateful
      ipv6_ra_mode: dhcpv6-stateful
      prefixlen: 64
      subnetpool:  { get_param: ipv6_subnetpool }

  dualstack_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { "network": { get_param: provider_network } }
      name: heat_dualstack_router_ubuntu

  ipv4_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: ipv4_subnet
    properties:
      router_id: { get_resource: dualstack_router }
      subnet: { get_resource: ipv4_subnet }

  ipv6_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: ipv6_subnet
    properties:
      router_id: { get_resource: dualstack_router }
      subnet: { get_resource: ipv6_subnet }

  secgrp:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming ssh and icmp traffic from anywhere.
      name: heat_dualstack_icmp_ssh_ubuntu
      rules:
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp, ethertype: IPv4 }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 8000, port_range_max: 8000, protocol: tcp, ethertype: IPv4 }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp, ethertype: IPv4 }
        - { direction: ingress, remote_ip_prefix: "::/0", port_range_min: 22, port_range_max: 22, protocol: tcp, ethertype: IPv6 }
        - { direction: ingress, remote_ip_prefix: "::/0", port_range_min: 8000, port_range_max: 8000, protocol: tcp, ethertype: IPv6 }
        - { direction: ingress, remote_ip_prefix: "::/0", protocol: ipv6-icmp, ethertype: IPv6 }

  ipv6_loadbalancer:
    depends_on: ipv4_loadbalancer
    type: OS::Octavia::LoadBalancer
    properties:
      name: dualstack_lb_v6
      vip_subnet: { get_resource: ipv6_subnet }

  ipv6_lb_listener:
    type: OS::Octavia::Listener
    depends_on: ipv6_loadbalancer
    properties:
      name: dualstack_lb_listener_v6
      loadbalancer: { get_resource: ipv6_loadbalancer }
      protocol: HTTP
      protocol_port: 80

  ipv6_lb_pool:
    type: OS::Octavia::Pool
    depends_on: ipv6_loadbalancer
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: ipv6_lb_listener }

  ipv6_lb_monitor:
    type: OS::Octavia::HealthMonitor
    depends_on: ipv6_loadbalancer
    properties:
      delay: 5 # seconds
      max_retries: 2 # range 1 to 10
      timeout: 5 # seconds
      pool: { get_resource: ipv6_lb_pool }
      type: HTTP
      http_method: GET
      url_path: /

  ipv4_loadbalancer:
    type: OS::Octavia::LoadBalancer
    properties:
      name: dualstack_lb_v4
      vip_subnet: { get_resource: ipv4_subnet }

  ipv4_lb_listener:
    type: OS::Octavia::Listener
    depends_on: ipv4_loadbalancer
    properties:
      name: dualstack_lb_listener_v4
      loadbalancer: { get_resource: ipv4_loadbalancer }
      protocol: HTTP
      protocol_port: 80

  ipv4_lb_pool:
    type: OS::Octavia::Pool
    depends_on: ipv4_loadbalancer
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: ipv4_lb_listener }

  ipv4_lb_monitor:
    depends_on: ipv4_loadbalancer
    type: OS::Octavia::HealthMonitor
    properties:
      delay: 5 # seconds
      max_retries: 3 # range 1 to 10
      timeout: 5 # seconds
      pool: { get_resource: ipv4_lb_pool }
      type: HTTP
      http_method: GET
      url_path: /

  ipv4_lb_floatingip:
    depends_on:
      - dualstack_router
      - ipv4_router_interface  # Important, since otherwise there is no connection to provider_network yet
      - ipv4_loadbalancer
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: provider_network }
      port_id: { get_attr: [ipv4_loadbalancer, vip_port_id] }

  worker_nodes:
    type: OS::Heat::ResourceGroup
    depends_on:
      - ipv4_subnet
      - ipv6_subnet
      - ipv4_lb_pool
      - ipv6_lb_pool
    properties:
      count: 2
      resource_def:
        type: _lb_member.yaml
        properties:
          server_name:
            list_join:
              - ''
              - - dualstack_ubuntu_worker_node
                - "%index%"
          server_image: { get_param: server_image }
          ssh_key: { get_param: ssh_key }
          secgrp: { get_resource: secgrp }
          network: { get_resource: dualstack_net }
          ipv4_subnet: { get_resource: ipv4_subnet }
          ipv6_subnet: { get_resource: ipv6_subnet }
          ipv4_lb_pool: { get_resource: ipv4_lb_pool }
          ipv6_lb_pool: { get_resource: ipv6_lb_pool }
          availability_zone: { get_param: availability_zone }

outputs:
  ipv4_lb_address:
    description: FloatingIP of the IPv4 LoadBalancer
    value: { get_attr: [ipv4_lb_floatingip, floating_ip_address ] }
  ipv6_lb_address:
    description: IPv6 address of the LoadBalancer
    value: { get_attr: [ipv6_loadbalancer, vip_address ] }
